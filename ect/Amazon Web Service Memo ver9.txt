CIDR
10 . 0 . 0 . 0 / 16
Network address : name의 성과 같은 것, 주어진 것이고 바꿀 수 없다.
Host address : name의 이름과 같은 것, 내가 바꿀 수 있다.

0000 0000   0000 0000   0000 0000   0000 0000
앞의 10 . 0 . 0 . 0 은 위의 비트를 의미 한다.

뒤의 / number는 왼쪽에서부터 Network address가 쓸 수 있는 비트 수를 의미한다.
따라서 / 16은 왼쪽에서부터 16비트를 Network address가 사용한다는 의미이다.

그렇기에 10 . 0 . 0 . 0 ~ 10 . 0 . 255 . 255 까지의 주소를 이용할 수 있다.
왜냐하면 뒤의 16비트는 Host address이여서 내가 직접 바꿀 수 있기 때문이다.

~~~~~~~~~~~~~~~~

Domain Name System

WWW .	NAVER .	COM .
		NET .
		ORG .
		KR .	등등

COM 등등의 탑 도메인의 뒤에 나오는 . (닷)은 그 앞에 있는 COM과 IP를
매칭시켜주는 테이블을 가지고 있는 서버이다.
또한 NAVER 뒤의 . 은 NAVER와 IP를 매칭시켜주는 서버이다.

하지만 WWW 뒤에 나오는 . 은 WWW와 IP를 매칭시켜주는 테이블을 가지고 있는 서버이지만
내가 직접 설정할 수 있는 서버이다.

그렇기 때문에 naver.com에도 cafe.naver.com이 있고 email.naver.com이 있다.
이는 내가 직접 설정할 수 있는 서버이기 때문에 가능한 일이었다.

Route53은 NameServer를 구축하는 시스템

또한 naver의 . 과 com의 . 은 ip 주소가 다르다.
사용자가 주소로 접근할 때 가장 뒤에서부터 접근을 시작한다.
위를 예로 들면 com의 뒤에 있는 . 부터 접근하여 com과 ip를 매칭시도한다. 

~~~~~~~~~~~~~~~~

인증 / 권한 부여

하나의 애플리케이션에 접속하기 위해서는 사용자의 ID과 PASSWORD를 이용하여 인증을 해야 한다.
이렇게 인증을 하게 되면 권한을 부여한다.

또한 이 인증을 통한 권한은 연관 애플리케이션과 연동이 되는데,
예를 들어 NAVER에 로그인을 하고 나서 네이버 카페나 네이버 메일에 들어갔을 때
로그인을 다시 안 해도 되는 이유는 연관되어 연동이 되기 때문이다.

이를 AWS의 IAM에 적용하면 IAM 역할을 부여하는 것이다.
예를 들어 EC2가 S3를 사용할 수 있도록 하려면
EC2를 설정할 때 IAM 역할을 EC2 S3 Full Access로 주면
내 개입이 없어도 EC2가 S3를 사용할 수 있도록 할 수 있다.

~~~~~~~~~~~~~~~~

AWS를 사용하는 이유
- 돈을 절약하기 위해서
	1) 서버를 사용하는데 들어가는 돈을 줄이기 위해서
	2) 서버를 유지하는데 (유지 보수) 들어가는 돈을 줄이기 위해서
'
위에서 말한 인증 / 권한 부여를 AWS에서도 적용하여 책임을 AWS와 사용자를 구분한다.
예를 들어 하이퍼 바이저를 포함한 밑단은 AWS만 접근하여 권한을 가지고 있다.
그리고 하이퍼 바이저의 윗단 즉, 운영체제부터는 사용자가 접근할 수 있는 권한을 가지고 있다.
따라서 하이퍼 바이저를 포함한 밑단에서 오류가 발생하면 AWS의 책임이 생긴다.

이렇게 되면 사용자는 하이퍼 바지어를 포함한 밑단에 대한 생각을 안 해도 된다.
이러한 방식을 통해 서버를 유지하는 권한을 AWS가 가져서 사용자가 서버에 대해서 생각하지 않아도 되는 방식을
서버리스라고 한다.

~~~~~~~~~~~~~~~~~~~

API
한 서비스가 다른 서비스에게 어떠한 요청을 보내면 어떠한 규약에 의해 처리되어 응답하는 것

RESTful API
요청 - 응답의 형식으로 이루어짐
블로그, 소셜 미디어와 같은 애플리케이션
- 카카오톡과 같은 형식
- 한쪽이 요청을 보내고나면 요청 사실을 잊고 다른 한쪽은 오면 작업을 시작함

WebSocket API
쌍방향 통신 형식으로 이루어짐
실시간으로 작업
- 페이스북이나 디스코드와 같이 상대가 채팅치고 있는 것이 뜨는 애플리케이션
- 전화와 같이 실시간으로 동작

