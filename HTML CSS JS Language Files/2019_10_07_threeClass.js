// 2019 10 07 첫 교시~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var arr = ['one', 'two', 'three', 'four'];
console.log(arr);
console.log(arr.length);

arr.splice(1, 2, 'five', 'six');
// splice는 delete와 다르게 직접 삭제하는 것이라서 인덱스가 바뀐다.
// splice(시작 인덱스, 삭제할 갯수, 삭제한 프로퍼티에 들어갈 요소(생략가능));
// 과 같이 사용할 수 있다.
console.log(arr);
console.log(arr.length);

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

var foo = new Array(3);         // Array의 인자값에 수 하나만 들어가게 되면 배열의 길이를 정해주는 것이다.
console.log(foo);
console.log(foo.length);

var bar = new Array(1,2,3);     // 하지만 Array의 인자값에 1,2,3과 같이 인자값을 주면 인자를 준 갯수의 배열의 길이를 설정하고 초깃값을 설정해준다.
console.log(bar);
console.log(bar.length);

let d = new Array(1);           // 뭔짓을 해도 수 하나의 값을 이용해서 초기화된 배열을 만들 순 없다.
console.log(d);
console.log(d.length);

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

var arr = ['bar'];              // 유사 배열 객체 : length 프로퍼티를 가지고 있는 객체
var obj = {
    name : 'foo',
    leength : 1
};

arr.push('baz');
console.log(arr);
// obj.push('baz');

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

var add1 = 1 + 2;               // 3            number
var add2 = 'my' + ' string';    // my string    string
var add3 = 1 - 'string';        // NaN          number
var add4 = 'string' + 1;        // string1      string

console.log(add1); 
console.log(add2);
console.log(add3);
console.log(add4);

var arr1 = ['a', 'b', 'c', 'd'];
var arr2 = ['e', 'string'];

var add5 = arr1 + arr2;
console.log(add5);              // a,b,c,de,string      배열의 끝부분끼리는 붙는 것을 알 수 있다.

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

console.log(1=='1');        // == 동등 연산자 ( 값만 비교한다. )
console.log(1==='1');       // == 일치 연산자 ( 값뿐만 아니라 type까지 확인한다. )

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

console.log("!!0 = " + !!0);        // !! 연산자는 부정을 또 부정함으로써 다시 원래 type으로 되돌아온다. 하지만 ! 연산자의 반환값은 boolean 형이므로 자동으로 boolean 형으로 바꿔주는 역할을 한다.
console.log("!!1 = " + !!1);
console.log("!!'string' = " + !!'string');
console.log("!!'' = " + !!'');
console.log("!!true = " + !!true);
console.log("!!false = " + !!false);
console.log("!!null = " + !!null);
console.log("!!undefined = " + !!undefined);
console.log("!!{} = " + !!{});
console.log("!![1,2,3] = " + !![1,2,3]);